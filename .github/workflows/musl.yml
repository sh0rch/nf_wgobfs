name: Release

on:
  workflow_dispatch:
  push:
    tags:
      - '*'

jobs:
  build-test-package:
    name: Build, Test & Package
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-musl
            uses-cross: false
          - target: i686-unknown-linux-musl
            uses-cross: true
          - target: aarch64-unknown-linux-musl
            uses-cross: true
          - target: mipsel-unknown-linux-musl
            uses-cross: true
          # - target: mips64el-unknown-linux-muslabi64
          #   uses-cross: true
          - target: mips-unknown-linux-musl
            uses-cross: true
          - target: mips64el-unknown-linux-gnuabi64
            uses-cross: true
          - target: mips64-unknown-linux-gnuabi64
            uses-cross: true
          # - target: mips64-unknown-linux-muslabi64
          #   uses-cross: true
    env:
      CARGO_TERM_COLOR: always

    steps:
      - uses: actions/checkout@v4

      - name: Install deps
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y libnetfilter-queue-dev musl-tools

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-

      - name: Enable QEMU (all arch)
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all
          
      - name: Install Rust target
        if: matrix.uses-cross == false
        run: rustup target add ${{ matrix.target }}

      - name: Install cross
        if: matrix.uses-cross == true
        run: cargo install cross --git https://github.com/cross-rs/cross --tag v0.2.5

      - name: Install nightly toolchain
        if: matrix.uses-cross == true
        run: |
          rustup toolchain install nightly
          rustup component add rust-src --toolchain nightly

      - name: Read crate version
        id: ver
        run: |
          CRATE_VERSION=$(grep -m1 '^version' Cargo.toml | cut -d '"' -f2)
          echo "CRATE_VERSION=$CRATE_VERSION" >> $GITHUB_ENV
          echo "version=$CRATE_VERSION" >> $GITHUB_OUTPUT

      - name: Install fpm dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ruby-dev build-essential musl-tools gcc-multilib libc6-dev
          sudo gem install --no-document fpm

      - name: Build
        run: |
          if [ "${{ matrix.uses-cross }}" = "true" ]; then
            cross +nightly build --target ${{ matrix.target }} -Z build-std=std,core,alloc  --verbose --release
          else
            cargo build --target ${{ matrix.target }}  --verbose --release
          fi

      - name: Test
        run: |
          if [ "${{ matrix.uses-cross }}" = "true" ]; then
            cross +nightly test --target ${{ matrix.target }} -Z build-std=std,core,alloc --verbose -- --nocapture
          else
            cargo test --target ${{ matrix.target }} --verbose -- --nocapture
          fi

      - name: Create dist directory
        run: mkdir -p dist/${{ matrix.target }}

      - name: Package tar.gz
        run: |
          cp target/${{ matrix.target }}/release/nf_wgobfs dist/${{ matrix.target }}/nf_wgobfs
          tar -czf dist/nf_wgobfs-${{ matrix.target }}-${{ github.run_number }}.tar.gz -C dist/${{ matrix.target }} nf_wgobfs

      - name: Package deb
        run: |
          fpm -s dir -t deb \
            -n nf_wgobfs \
            -v ${{ github.run_number }} \
            --architecture ${{ matrix.target }} \
            --prefix /usr/bin \
            dist/${{ matrix.target }}/nf_wgobfs

      - name: Package rpm
        run: |
          fpm -s dir -t rpm \
            -n nf_wgobfs \
            -v ${{ github.run_number }} \
            --architecture ${{ matrix.target }} \
            --prefix /usr/bin \
            dist/${{ matrix.target }}/nf_wgobfs

      - name: Package apk (Alpine)
        run: |
          fpm -s dir -t apk \
            -n nf_wgobfs \
            -v ${{ github.run_number }} \
            --architecture ${{ matrix.target }} \
            --prefix /usr/bin \
            dist/${{ matrix.target }}/nf_wgobfs

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nf_wgobfs-${{ matrix.target }}
          path: |
            dist/nf_wgobfs-${{ matrix.target }}-${{ github.run_number }}.tar.gz
            dist/*.deb
            dist/*.rpm
            dist/*.apk

  publish:
    name: Publish Release Assets
    needs: build-test-package
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: packages
          path: ./dist

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist
          asset_name: |
            nf_wgobfs-${{ github.ref_name }}-${{ matrix.target }}.tar.gz
            nf_wgobfs-${{ github.ref_name }}-${{ matrix.target }}.deb
            nf_wgobfs-${{ github.ref_name }}-${{ matrix.target }}.rpm
            nf_wgobfs-${{ github.ref_name }}-${{ matrix.target }}.apk
          asset_content_type: application/octet-stream